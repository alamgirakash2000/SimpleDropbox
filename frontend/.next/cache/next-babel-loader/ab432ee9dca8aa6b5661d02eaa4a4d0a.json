{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\BlockChain\\\\Projects\\\\SimpleDropbox\\\\frontend\\\\pages\\\\index.js\";\nimport \"../styles/index.scss\";\nimport Head from \"next/head\";\nimport web3 from \"../src/web3\";\nimport SimpleDropbox from \"../src/SimpleDropbox\";\nimport { useEffect, useState } from \"react\";\nimport Header from \"../components/Header\";\nimport Loading from \"./../components/Loading\";\nexport default function Home() {\n  const {\n    0: user,\n    1: setUser\n  } = useState(\"\");\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: owner,\n    1: setOwner\n  } = useState(\"\");\n  const {\n    0: filesCount,\n    1: setFilesCount\n  } = useState(0);\n  useEffect(() => {\n    loadBlockchain();\n  }, []);\n\n  const loadBlockchain = async () => {\n    setLoading(true); // Load web3 to connect with metamask\n\n    if (web3) {\n      const users = await web3.eth.getAccounts();\n      setUser(users[0]);\n    } // Fetch Owner\n\n\n    const owner = await SimpleDropbox.methods.owner().call();\n    setOwner(owner); // Fetch the number of files\n\n    const count = await SimpleDropbox.methods.getLength().call();\n    setFilesCount(count);\n    setLoading(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Simple Dropbox by Akash\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: \"This is a simple dropbox created using IPFS technology where anybody can store files and read them at anytime. For this, one has to be connected to Ethereum rinkeby testnet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"body\",\n      children: [loading && /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Header, {\n        user: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Start from here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Owner: \", owner]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"My files: \", filesCount, \" files\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}","map":{"version":3,"sources":["D:/BlockChain/Projects/SimpleDropbox/frontend/pages/index.js"],"names":["Head","web3","SimpleDropbox","useEffect","useState","Header","Loading","Home","user","setUser","loading","setLoading","owner","setOwner","filesCount","setFilesCount","loadBlockchain","users","eth","getAccounts","methods","call","count","getLength"],"mappings":";;;AAAA,OAAO,sBAAP;AACA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AAEA,eAAe,SAASC,IAAT,GAAgB;AAC7B,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBL,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAA,OAACM,OAAD;AAAA,OAAUC;AAAV,MAAwBP,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAA,OAACQ,KAAD;AAAA,OAAQC;AAAR,MAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACU,UAAD;AAAA,OAAaC;AAAb,MAA8BX,QAAQ,CAAC,CAAD,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,cAAc;AACf,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,cAAc,GAAG,YAAY;AACjCL,IAAAA,UAAU,CAAC,IAAD,CAAV,CADiC,CAEjC;;AACA,QAAIV,IAAJ,EAAU;AACR,YAAMgB,KAAK,GAAG,MAAMhB,IAAI,CAACiB,GAAL,CAASC,WAAT,EAApB;AACAV,MAAAA,OAAO,CAACQ,KAAK,CAAC,CAAD,CAAN,CAAP;AACD,KANgC,CAQjC;;;AACA,UAAML,KAAK,GAAG,MAAMV,aAAa,CAACkB,OAAd,CAAsBR,KAAtB,GAA8BS,IAA9B,EAApB;AACAR,IAAAA,QAAQ,CAACD,KAAD,CAAR,CAViC,CAYjC;;AACA,UAAMU,KAAK,GAAG,MAAMpB,aAAa,CAACkB,OAAd,CAAsBG,SAAtB,GAAkCF,IAAlC,EAApB;AACAN,IAAAA,aAAa,CAACO,KAAD,CAAb;AAEAX,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAjBD;;AAmBA,sBACE;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,aADP;AAEE,QAAA,OAAO,EAAC;AAFV;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eASE;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAA,iBACGD,OAAO,iBAAI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cADd,eAEE,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAEF;AAAd;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,gCAAWI,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAA,mCAAcE,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YATF;AAAA,kBADF;AAqBD","sourcesContent":["import \"../styles/index.scss\";\r\nimport Head from \"next/head\";\r\nimport web3 from \"../src/web3\";\r\nimport SimpleDropbox from \"../src/SimpleDropbox\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Header from \"../components/Header\";\r\nimport Loading from \"./../components/Loading\";\r\n\r\nexport default function Home() {\r\n  const [user, setUser] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [owner, setOwner] = useState(\"\");\r\n  const [filesCount, setFilesCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    loadBlockchain();\r\n  }, []);\r\n\r\n  const loadBlockchain = async () => {\r\n    setLoading(true);\r\n    // Load web3 to connect with metamask\r\n    if (web3) {\r\n      const users = await web3.eth.getAccounts();\r\n      setUser(users[0]);\r\n    }\r\n\r\n    // Fetch Owner\r\n    const owner = await SimpleDropbox.methods.owner().call();\r\n    setOwner(owner);\r\n\r\n    // Fetch the number of files\r\n    const count = await SimpleDropbox.methods.getLength().call();\r\n    setFilesCount(count);\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>Simple Dropbox by Akash</title>\r\n        <meta\r\n          name='description'\r\n          content='This is a simple dropbox created using IPFS technology where anybody can store files and read them at anytime. For this, one has to be connected to Ethereum rinkeby testnet.'\r\n        />\r\n      </Head>\r\n\r\n      <main className='body'>\r\n        {loading && <Loading />}\r\n        <Header user={user} />\r\n        <div className='container'>\r\n          <p>Start from here</p>\r\n          <p>Owner: {owner}</p>\r\n          <p>My files: {filesCount} files</p>\r\n        </div>\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}